package io.github.tsnee.hpack.huffman

import scala.annotation.tailrec
import zio.Chunk

/** A Huffman code represented by a binary tree.
  *
  * Every `Leaf` node of the tree represents one character of the alphabet
  * that the tree can encode.
  *
  * The branches of the huffman tree, the `Fork` nodes, represent a set
  * containing all the characters present in the leaves below it.
  */
object HuffmanTree extends HuffmanCodec {
  private sealed trait CodeTree
  private final case class Fork(
    left: CodeTree,
    right: CodeTree,
    bytes: List[Byte]
  ) extends CodeTree
  private final case class Leaf(byte: Byte) extends CodeTree

  private def bytes(tree: CodeTree): List[Byte] = tree match {
    case Leaf(byte) => List(byte)
    case Fork(_, _, byteList) => byteList
  }

  private val tree: CodeTree = Fork(Fork(Fork(Fork(Fork(Leaf(48),Leaf(49),List(49, 48)),Fork(Leaf(50),Leaf(97),List(97, 50)),List(97, 50, 49, 48)),Fork(Fork(Leaf(99),Leaf(101),List(101, 99)),Fork(Leaf(105),Leaf(111),List(111, 105)),List(111, 105, 101, 99)),List(111, 105, 101, 99, 97, 50, 49, 48)),Fork(Fork(Fork(Leaf(115),Leaf(116),List(116, 115)),Fork(Fork(Leaf(32),Leaf(37),List(37, 32)),Fork(Leaf(45),Leaf(46),List(46, 45)),List(46, 45, 37, 32)),List(116, 115, 46, 45, 37, 32)),Fork(Fork(Fork(Leaf(47),Leaf(51),List(51, 47)),Fork(Leaf(52),Leaf(53),List(53, 52)),List(53, 52, 51, 47)),Fork(Fork(Leaf(54),Leaf(55),List(55, 54)),Fork(Leaf(56),Leaf(57),List(57, 56)),List(57, 56, 55, 54)),List(57, 56, 55, 54, 53, 52, 51, 47)),List(116, 115, 57, 56, 55, 54, 53, 52, 51, 47, 46, 45, 37, 32)),List(116, 115, 111, 105, 101, 99, 97, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 37, 32)),Fork(Fork(Fork(Fork(Fork(Leaf(61),Leaf(65),List(65, 61)),Fork(Leaf(95),Leaf(98),List(98, 95)),List(98, 95, 65, 61)),Fork(Fork(Leaf(100),Leaf(102),List(102, 100)),Fork(Leaf(103),Leaf(104),List(104, 103)),List(104, 103, 102, 100)),List(104, 103, 102, 100, 98, 95, 65, 61)),Fork(Fork(Fork(Leaf(108),Leaf(109),List(109, 108)),Fork(Leaf(110),Leaf(112),List(112, 110)),List(112, 110, 109, 108)),Fork(Fork(Leaf(114),Leaf(117),List(117, 114)),Fork(Fork(Leaf(58),Leaf(66),List(66, 58)),Fork(Leaf(67),Leaf(68),List(68, 67)),List(68, 67, 66, 58)),List(117, 114, 68, 67, 66, 58)),List(117, 114, 112, 110, 109, 108, 68, 67, 66, 58)),List(117, 114, 112, 110, 109, 108, 104, 103, 102, 100, 98, 95, 68, 67, 66, 65, 61, 58)),Fork(Fork(Fork(Fork(Fork(Leaf(69),Leaf(70),List(70, 69)),Fork(Leaf(71),Leaf(72),List(72, 71)),List(72, 71, 70, 69)),Fork(Fork(Leaf(73),Leaf(74),List(74, 73)),Fork(Leaf(75),Leaf(76),List(76, 75)),List(76, 75, 74, 73)),List(76, 75, 74, 73, 72, 71, 70, 69)),Fork(Fork(Fork(Leaf(77),Leaf(78),List(78, 77)),Fork(Leaf(79),Leaf(80),List(80, 79)),List(80, 79, 78, 77)),Fork(Fork(Leaf(81),Leaf(82),List(82, 81)),Fork(Leaf(83),Leaf(84),List(84, 83)),List(84, 83, 82, 81)),List(84, 83, 82, 81, 80, 79, 78, 77)),List(84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69)),Fork(Fork(Fork(Fork(Leaf(85),Leaf(86),List(86, 85)),Fork(Leaf(87),Leaf(89),List(89, 87)),List(89, 87, 86, 85)),Fork(Fork(Leaf(106),Leaf(107),List(107, 106)),Fork(Leaf(113),Leaf(118),List(118, 113)),List(118, 113, 107, 106)),List(118, 113, 107, 106, 89, 87, 86, 85)),Fork(Fork(Fork(Leaf(119),Leaf(120),List(120, 119)),Fork(Leaf(121),Leaf(122),List(122, 121)),List(122, 121, 120, 119)),Fork(Fork(Fork(Leaf(38),Leaf(42),List(42, 38)),Fork(Leaf(44),Leaf(59),List(59, 44)),List(59, 44, 42, 38)),Fork(Fork(Leaf(88),Leaf(90),List(90, 88)),Fork(Fork(Fork(Leaf(33),Leaf(34),List(34, 33)),Fork(Leaf(40),Leaf(41),List(41, 40)),List(41, 40, 34, 33)),Fork(Fork(Leaf(63),Fork(Leaf(39),Leaf(43),List(43, 39)),List(63, 43, 39)),Fork(Fork(Leaf(124),Fork(Leaf(35),Leaf(62),List(62, 35)),List(124, 62, 35)),Fork(Fork(Fork(Leaf(0),Leaf(36),List(36, 0)),Fork(Leaf(64),Leaf(91),List(91, 64)),List(91, 64, 36, 0)),Fork(Fork(Leaf(93),Leaf(126),List(126, 93)),Fork(Fork(Leaf(94),Leaf(125),List(125, 94)),Fork(Fork(Leaf(60),Leaf(96),List(96, 60)),Fork(Leaf(123),Fork(Fork(Fork(Fork(Leaf(92),Leaf(-61),List(-61, 92)),Fork(Leaf(-48),Fork(Leaf(-128),Leaf(-126),List(-126, -128)),List(-48, -126, -128)),List(-48, -61, -126, -128, 92)),Fork(Fork(Fork(Leaf(-125),Leaf(-94),List(-94, -125)),Fork(Leaf(-72),Leaf(-62),List(-62, -72)),List(-62, -72, -94, -125)),Fork(Fork(Leaf(-32),Leaf(-30),List(-30, -32)),Fork(Fork(Leaf(-103),Leaf(-95),List(-95, -103)),Fork(Leaf(-89),Leaf(-84),List(-84, -89)),List(-84, -89, -95, -103)),List(-30, -32, -84, -89, -95, -103)),List(-30, -32, -62, -72, -84, -89, -94, -95, -103, -125)),List(-30, -32, -48, -61, -62, -72, -84, -89, -94, -95, -103, -125, -126, -128, 92)),Fork(Fork(Fork(Fork(Fork(Leaf(-80),Leaf(-79),List(-79, -80)),Fork(Leaf(-77),Leaf(-47),List(-47, -77)),List(-47, -77, -79, -80)),Fork(Fork(Leaf(-40),Leaf(-39),List(-39, -40)),Fork(Leaf(-29),Leaf(-27),List(-27, -29)),List(-27, -29, -39, -40)),List(-27, -29, -39, -40, -47, -77, -79, -80)),Fork(Fork(Fork(Leaf(-26),Fork(Leaf(-127),Leaf(-124),List(-124, -127)),List(-26, -124, -127)),Fork(Fork(Leaf(-123),Leaf(-122),List(-122, -123)),Fork(Leaf(-120),Leaf(-110),List(-110, -120)),List(-110, -120, -122, -123)),List(-26, -110, -120, -122, -123, -124, -127)),Fork(Fork(Fork(Leaf(-102),Leaf(-100),List(-100, -102)),Fork(Leaf(-96),Leaf(-93),List(-93, -96)),List(-93, -96, -100, -102)),Fork(Fork(Leaf(-92),Leaf(-87),List(-87, -92)),Fork(Leaf(-86),Leaf(-83),List(-83, -86)),List(-83, -86, -87, -92)),List(-83, -86, -87, -92, -93, -96, -100, -102)),List(-26, -83, -86, -87, -92, -93, -96, -100, -102, -110, -120, -122, -123, -124, -127)),List(-26, -27, -29, -39, -40, -47, -77, -79, -80, -83, -86, -87, -92, -93, -96, -100, -102, -110, -120, -122, -123, -124, -127)),Fork(Fork(Fork(Fork(Fork(Leaf(-78),Leaf(-75),List(-75, -78)),Fork(Leaf(-71),Leaf(-70),List(-70, -71)),List(-70, -71, -75, -78)),Fork(Fork(Leaf(-69),Leaf(-67),List(-67, -69)),Fork(Leaf(-66),Leaf(-60),List(-60, -66)),List(-60, -66, -67, -69)),List(-60, -66, -67, -69, -70, -71, -75, -78)),Fork(Fork(Fork(Leaf(-58),Leaf(-28),List(-28, -58)),Fork(Leaf(-24),Leaf(-23),List(-23, -24)),List(-23, -24, -28, -58)),Fork(Fork(Fork(Leaf(1),Leaf(-121),List(-121, 1)),Fork(Leaf(-119),Leaf(-118),List(-118, -119)),List(-118, -119, -121, 1)),Fork(Fork(Leaf(-117),Leaf(-116),List(-116, -117)),Fork(Leaf(-115),Leaf(-113),List(-113, -115)),List(-113, -115, -116, -117)),List(-113, -115, -116, -117, -118, -119, -121, 1)),List(-23, -24, -28, -58, -113, -115, -116, -117, -118, -119, -121, 1)),List(-23, -24, -28, -58, -60, -66, -67, -69, -70, -71, -75, -78, -113, -115, -116, -117, -118, -119, -121, 1)),Fork(Fork(Fork(Fork(Fork(Leaf(-109),Leaf(-107),List(-107, -109)),Fork(Leaf(-106),Leaf(-105),List(-105, -106)),List(-105, -106, -107, -109)),Fork(Fork(Leaf(-104),Leaf(-101),List(-101, -104)),Fork(Leaf(-99),Leaf(-98),List(-98, -99)),List(-98, -99, -101, -104)),List(-98, -99, -101, -104, -105, -106, -107, -109)),Fork(Fork(Fork(Leaf(-91),Leaf(-90),List(-90, -91)),Fork(Leaf(-88),Leaf(-82),List(-82, -88)),List(-82, -88, -90, -91)),Fork(Fork(Leaf(-81),Leaf(-76),List(-76, -81)),Fork(Leaf(-74),Leaf(-73),List(-73, -74)),List(-73, -74, -76, -81)),List(-73, -74, -76, -81, -82, -88, -90, -91)),List(-73, -74, -76, -81, -82, -88, -90, -91, -98, -99, -101, -104, -105, -106, -107, -109)),Fork(Fork(Fork(Fork(Leaf(-68),Leaf(-65),List(-65, -68)),Fork(Leaf(-59),Leaf(-25),List(-25, -59)),List(-25, -59, -65, -68)),Fork(Fork(Leaf(-17),Fork(Leaf(9),Leaf(-114),List(-114, 9)),List(-17, -114, 9)),Fork(Fork(Leaf(-112),Leaf(-111),List(-111, -112)),Fork(Leaf(-108),Leaf(-97),List(-97, -108)),List(-97, -108, -111, -112)),List(-17, -97, -108, -111, -112, -114, 9)),List(-17, -25, -59, -65, -68, -97, -108, -111, -112, -114, 9)),Fork(Fork(Fork(Fork(Leaf(-85),Leaf(-50),List(-50, -85)),Fork(Leaf(-41),Leaf(-31),List(-31, -41)),List(-31, -41, -50, -85)),Fork(Fork(Leaf(-20),Leaf(-19),List(-19, -20)),Fork(Fork(Leaf(-57),Leaf(-49),List(-49, -57)),Fork(Leaf(-22),Leaf(-21),List(-21, -22)),List(-21, -22, -49, -57)),List(-19, -20, -21, -22, -49, -57)),List(-19, -20, -21, -22, -31, -41, -49, -50, -57, -85)),Fork(Fork(Fork(Fork(Fork(Leaf(-64),Leaf(-63),List(-63, -64)),Fork(Leaf(-56),Leaf(-55),List(-55, -56)),List(-55, -56, -63, -64)),Fork(Fork(Leaf(-54),Leaf(-51),List(-51, -54)),Fork(Leaf(-46),Leaf(-43),List(-43, -46)),List(-43, -46, -51, -54)),List(-43, -46, -51, -54, -55, -56, -63, -64)),Fork(Fork(Fork(Leaf(-38),Leaf(-37),List(-37, -38)),Fork(Leaf(-18),Leaf(-16),List(-16, -18)),List(-16, -18, -37, -38)),Fork(Fork(Leaf(-14),Leaf(-13),List(-13, -14)),Fork(Leaf(-1),Fork(Leaf(-53),Leaf(-52),List(-52, -53)),List(-1, -52, -53)),List(-1, -13, -14, -52, -53)),List(-1, -13, -14, -16, -18, -37, -38, -52, -53)),List(-1, -13, -14, -16, -18, -37, -38, -43, -46, -51, -52, -53, -54, -55, -56, -63, -64)),Fork(Fork(Fork(Fork(Fork(Leaf(-45),Leaf(-44),List(-44, -45)),Fork(Leaf(-42),Leaf(-35),List(-35, -42)),List(-35, -42, -44, -45)),Fork(Fork(Leaf(-34),Leaf(-33),List(-33, -34)),Fork(Leaf(-15),Leaf(-12),List(-12, -15)),List(-12, -15, -33, -34)),List(-12, -15, -33, -34, -35, -42, -44, -45)),Fork(Fork(Fork(Leaf(-11),Leaf(-10),List(-10, -11)),Fork(Leaf(-9),Leaf(-8),List(-8, -9)),List(-8, -9, -10, -11)),Fork(Fork(Leaf(-6),Leaf(-5),List(-5, -6)),Fork(Leaf(-4),Leaf(-3),List(-3, -4)),List(-3, -4, -5, -6)),List(-3, -4, -5, -6, -8, -9, -10, -11)),List(-3, -4, -5, -6, -8, -9, -10, -11, -12, -15, -33, -34, -35, -42, -44, -45)),Fork(Fork(Fork(Fork(Leaf(-2),Fork(Leaf(2),Leaf(3),List(3, 2)),List(-2, 3, 2)),Fork(Fork(Leaf(4),Leaf(5),List(5, 4)),Fork(Leaf(6),Leaf(7),List(7, 6)),List(7, 6, 5, 4)),List(-2, 7, 6, 5, 4, 3, 2)),Fork(Fork(Fork(Leaf(8),Leaf(11),List(11, 8)),Fork(Leaf(12),Leaf(14),List(14, 12)),List(14, 12, 11, 8)),Fork(Fork(Leaf(15),Leaf(16),List(16, 15)),Fork(Leaf(17),Leaf(18),List(18, 17)),List(18, 17, 16, 15)),List(18, 17, 16, 15, 14, 12, 11, 8)),List(-2, 18, 17, 16, 15, 14, 12, 11, 8, 7, 6, 5, 4, 3, 2)),Fork(Fork(Fork(Fork(Leaf(19),Leaf(20),List(20, 19)),Fork(Leaf(21),Leaf(23),List(23, 21)),List(23, 21, 20, 19)),Fork(Fork(Leaf(24),Leaf(25),List(25, 24)),Fork(Leaf(26),Leaf(27),List(27, 26)),List(27, 26, 25, 24)),List(27, 26, 25, 24, 23, 21, 20, 19)),Fork(Fork(Fork(Leaf(28),Leaf(29),List(29, 28)),Fork(Leaf(30),Leaf(31),List(31, 30)),List(31, 30, 29, 28)),Fork(Fork(Leaf(127),Leaf(-36),List(-36, 127)),Fork(Leaf(-7),Fork(Fork(Leaf(10),Leaf(13),List(13, 10)),Fork(Leaf(22),Leaf(0),List(0, 22)),List(0, 22, 13, 10)),List(0, -7, 22, 13, 10)),List(0, -7, -36, 127, 22, 13, 10)),List(0, -7, -36, 127, 31, 30, 29, 28, 22, 13, 10)),List(0, -7, -36, 127, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 13, 10)),List(0, -2, -7, -36, 127, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8, 7, 6, 5, 4, 3, 2)),List(0, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -15, -33, -34, -35, -36, -42, -44, -45, 127, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8, 7, 6, 5, 4, 3, 2)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -18, -33, -34, -35, -36, -37, -38, -42, -43, -44, -45, -46, -51, -52, -53, -54, -55, -56, -63, -64, 127, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8, 7, 6, 5, 4, 3, 2)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -18, -19, -20, -21, -22, -31, -33, -34, -35, -36, -37, -38, -41, -42, -43, -44, -45, -46, -49, -50, -51, -52, -53, -54, -55, -56, -57, -63, -64, -85, 127, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8, 7, 6, 5, 4, 3, 2)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -25, -31, -33, -34, -35, -36, -37, -38, -41, -42, -43, -44, -45, -46, -49, -50, -51, -52, -53, -54, -55, -56, -57, -59, -63, -64, -65, -68, -85, -97, -108, -111, -112, -114, 127, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -25, -31, -33, -34, -35, -36, -37, -38, -41, -42, -43, -44, -45, -46, -49, -50, -51, -52, -53, -54, -55, -56, -57, -59, -63, -64, -65, -68, -73, -74, -76, -81, -82, -85, -88, -90, -91, -97, -98, -99, -101, -104, -105, -106, -107, -108, -109, -111, -112, -114, 127, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -28, -31, -33, -34, -35, -36, -37, -38, -41, -42, -43, -44, -45, -46, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -63, -64, -65, -66, -67, -68, -69, -70, -71, -73, -74, -75, -76, -78, -81, -82, -85, -88, -90, -91, -97, -98, -99, -101, -104, -105, -106, -107, -108, -109, -111, -112, -113, -114, -115, -116, -117, -118, -119, -121, 127, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -31, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -63, -64, -65, -66, -67, -68, -69, -70, -71, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -85, -86, -87, -88, -90, -91, -92, -93, -96, -97, -98, -99, -100, -101, -102, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -127, 127, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 92, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 123, 92, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 123, 96, 92, 60, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 125, 123, 96, 94, 92, 60, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 126, 125, 123, 96, 94, 93, 92, 60, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 126, 125, 123, 96, 94, 93, 92, 91, 64, 60, 36, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 126, 125, 124, 123, 96, 94, 93, 92, 91, 64, 62, 60, 36, 35, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 126, 125, 124, 123, 96, 94, 93, 92, 91, 64, 63, 62, 60, 43, 39, 36, 35, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 126, 125, 124, 123, 96, 94, 93, 92, 91, 64, 63, 62, 60, 43, 41, 40, 39, 36, 35, 34, 33, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 126, 125, 124, 123, 96, 94, 93, 92, 91, 90, 88, 64, 63, 62, 60, 43, 41, 40, 39, 36, 35, 34, 33, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 126, 125, 124, 123, 96, 94, 93, 92, 91, 90, 88, 64, 63, 62, 60, 59, 44, 43, 42, 41, 40, 39, 38, 36, 35, 34, 33, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 96, 94, 93, 92, 91, 90, 88, 64, 63, 62, 60, 59, 44, 43, 42, 41, 40, 39, 38, 36, 35, 34, 33, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 113, 107, 106, 96, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 64, 63, 62, 60, 59, 44, 43, 42, 41, 40, 39, 38, 36, 35, 34, 33, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 113, 107, 106, 96, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 64, 63, 62, 60, 59, 44, 43, 42, 41, 40, 39, 38, 36, 35, 34, 33, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 114, 113, 112, 110, 109, 108, 107, 106, 104, 103, 102, 100, 98, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 44, 43, 42, 41, 40, 39, 38, 36, 35, 34, 33, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)),List(0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0))

  override def decode(input: Chunk[Byte]): Chunk[Byte] =
    Chunk.fromIterable(decode(tree, expand(input)))

  private def expand(input: Chunk[Byte]): List[Bit] =
    input.toList.flatMap { byte => List(
      byte & 0x80, byte & 0x40, byte & 0x20, byte & 0x10,
      byte & 0x08, byte & 0x04, byte & 0x02, byte & 0x01)
    }

  type Bit = Int

  /** Decodes the bit sequence `bits` using the code tree
    * `tree` and returns the resulting list of characters.
    */
  private def decode(tree: CodeTree, bits: List[Bit]): List[Byte] = {
    def decodeNextByte(
      subTree: CodeTree,
      bitsRemaining: List[Bit]
    ): List[Byte] =
      subTree match {
        case Leaf(byte: Byte) =>
          byte :: decodeNextByte(tree, bitsRemaining)
        case Fork(left: CodeTree, right: CodeTree, _) =>
          if (bitsRemaining.isEmpty)
            Nil
          else if (bitsRemaining.head == 0)
            decodeNextByte(left, bitsRemaining.tail)
          else
            decodeNextByte(right, bitsRemaining.tail)
      }
    decodeNextByte(tree, bits)
  }

  override def encode(input: Chunk[Byte]): Chunk[Byte] =
    compact(encode(input.toList))

  private def compact(bitList: List[Bit]): Chunk[Byte] = {
    val bits = Chunk.fromIterable(bitList)
    val padLen = (8 - (bits.length % 8)) % 8
    val padded = bits ++ Chunk.fill(padLen)(0x01)
    val octets = padded.grouped(8)
    val ints = octets.map(_.foldLeft(0x00) { (acc, bit) =>
      (acc << 1) | bit
    })
    Chunk.fromArray(ints.map(_.toByte).toArray)
  }

  /** Encodes `text` using the code tree `tree`
    * into a sequence of bits.
    */
  private def encode(text: List[Byte]): List[Bit] = {
    def traverseTree(
      subTree: CodeTree,
      bytesRemaining: List[Byte]
    ): List[Bit] =
      subTree match {
        case Leaf(byteFound: Byte) => {
          assert(bytesRemaining.head == byteFound)
          traverseTree(tree, bytesRemaining.tail)
        }
        case Fork(left: CodeTree, right: CodeTree, _) =>
          if (bytesRemaining.isEmpty) Nil
          else if (bytes(left).contains(bytesRemaining.head))
            0 :: traverseTree(left, bytesRemaining)
          else 1 :: traverseTree(right, bytesRemaining)
      }
    traverseTree(tree, text)
  }

  type CodeTable = List[(Byte, List[Bit])]

  /** Given a code tree, create a code table which contains, for every
    * character in the code tree, the sequence of bits representing that
    * character.
    */
  private def convert(tree: CodeTree): CodeTable = {
    def traverseTree(subTree: CodeTree, bitsSoFar: List[Bit]): CodeTable =
      subTree match {
        case Fork(left: CodeTree, right: CodeTree, _) =>
          traverseTree(left, bitsSoFar :+ 0) :::
            traverseTree(right, bitsSoFar :+ 1)
        case Leaf(byteFound: Byte) => List((byteFound, bitsSoFar))
      }
    traverseTree(tree, Nil)
  }

  /** This function encodes `text` according to the code tree `tree`.
    *
    * To speed up the encoding process, it first converts the code tree to
    * a code table and then uses it to perform the actual encoding.
    */
  private def quickEncode(tree: CodeTree)(text: List[Byte]): List[Bit] = {
    val codeTable = convert(tree)
    @tailrec
    def findInTable(partialCodeTable: CodeTable, byte: Byte): List[Bit] = {
      require(!partialCodeTable.isEmpty)
      if (partialCodeTable.head._1 == byte) partialCodeTable.head._2
      else findInTable(partialCodeTable.tail, byte)
    }
    def processText(unprocessedText: List[Byte]): List[Bit] =
      if (unprocessedText.isEmpty) Nil
      else
        findInTable(codeTable, unprocessedText.head) :::
          processText(unprocessedText.tail)
    processText(text)
  }
}
